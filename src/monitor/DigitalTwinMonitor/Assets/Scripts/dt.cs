//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `dt.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace digitaltwin
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class RegistryNotFound : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public RegistryNotFound()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public RegistryNotFound(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public RegistryNotFound(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override string ice_id()
        {
            return "::digitaltwin::RegistryNotFound";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::digitaltwin::RegistryNotFound");
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            RegistryNotFound o = other as RegistryNotFound;
            if(o == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator==(RegistryNotFound lhs, RegistryNotFound rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator!=(RegistryNotFound lhs, RegistryNotFound rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::digitaltwin::RegistryNotFound", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [global::System.Serializable]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class InsertingError : global::Ice.UserException
    {
        #region Constructors

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public InsertingError()
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public InsertingError(global::System.Exception ex) : base(ex)
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public InsertingError(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #endregion

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override string ice_id()
        {
            return "::digitaltwin::InsertingError";
        }

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::digitaltwin::InsertingError");
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override bool Equals(object other)
        {
            if(other == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other))
            {
                return true;
            }
            InsertingError o = other as InsertingError;
            if(o == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator==(InsertingError lhs, InsertingError rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator!=(InsertingError lhs, InsertingError rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
        {
            ostr_.startSlice("::digitaltwin::InsertingError", -1, true);
            ostr_.endSlice();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        protected override void iceReadImpl(global::Ice.InputStream istr_)
        {
            istr_.startSlice();
            istr_.endSlice();
        }

        #endregion
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public enum TypeDataSet
    {
        Accelerometer,
        Gyroscope,
        Magnetometer
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public sealed class TypeDataSetHelper
    {
        public static void write(global::Ice.OutputStream ostr, TypeDataSet v)
        {
            ostr.writeEnum((int)v, 2);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static TypeDataSet read(global::Ice.InputStream istr)
        {
            TypeDataSet v;
            v = (TypeDataSet)istr.readEnum(2);
            return v;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public enum TypeSingleData
    {
        Temperature,
        Pressure,
        Humidity,
        Light
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public sealed class TypeSingleDataHelper
    {
        public static void write(global::Ice.OutputStream ostr, TypeSingleData v)
        {
            ostr.writeEnum((int)v, 3);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static TypeSingleData read(global::Ice.InputStream istr)
        {
            TypeSingleData v;
            v = (TypeSingleData)istr.readEnum(3);
            return v;
        }
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct DataSet
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float x;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float y;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float z;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public DataSet(float x, float y, float z)
        {
            this.x = x;
            this.y = y;
            this.z = z;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::digitaltwin::DataSet");
            global::IceInternal.HashUtil.hashAdd(ref h_, x);
            global::IceInternal.HashUtil.hashAdd(ref h_, y);
            global::IceInternal.HashUtil.hashAdd(ref h_, z);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override bool Equals(object other)
        {
            if(!(other is DataSet))
            {
                return false;
            }
            DataSet o = (DataSet)other;
            if(!this.x.Equals(o.x))
            {
                return false;
            }
            if(!this.y.Equals(o.y))
            {
                return false;
            }
            if(!this.z.Equals(o.z))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator==(DataSet lhs, DataSet rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator!=(DataSet lhs, DataSet rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeFloat(this.x);
            ostr.writeFloat(this.y);
            ostr.writeFloat(this.z);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.x = istr.readFloat();
            this.y = istr.readFloat();
            this.z = istr.readFloat();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static void ice_write(global::Ice.OutputStream ostr, DataSet v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static DataSet ice_read(global::Ice.InputStream istr)
        {
            var v = new DataSet();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct SingleDataLimits
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float maxLimit;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float minLimit;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public SingleDataLimits(float maxLimit, float minLimit)
        {
            this.maxLimit = maxLimit;
            this.minLimit = minLimit;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::digitaltwin::SingleDataLimits");
            global::IceInternal.HashUtil.hashAdd(ref h_, maxLimit);
            global::IceInternal.HashUtil.hashAdd(ref h_, minLimit);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override bool Equals(object other)
        {
            if(!(other is SingleDataLimits))
            {
                return false;
            }
            SingleDataLimits o = (SingleDataLimits)other;
            if(!this.maxLimit.Equals(o.maxLimit))
            {
                return false;
            }
            if(!this.minLimit.Equals(o.minLimit))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator==(SingleDataLimits lhs, SingleDataLimits rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator!=(SingleDataLimits lhs, SingleDataLimits rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeFloat(this.maxLimit);
            ostr.writeFloat(this.minLimit);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.maxLimit = istr.readFloat();
            this.minLimit = istr.readFloat();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static void ice_write(global::Ice.OutputStream ostr, SingleDataLimits v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static SingleDataLimits ice_read(global::Ice.InputStream istr)
        {
            var v = new SingleDataLimits();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    [global::System.Serializable]
    public partial struct DataSetLimits
    {
        #region Slice data members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float xMaxLimit;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float xMinLimit;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float yMaxLimit;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float yMinLimit;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float zMaxLimit;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public float zMinLimit;

        #endregion

        partial void ice_initialize();

        #region Constructor

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public DataSetLimits(float xMaxLimit, float xMinLimit, float yMaxLimit, float yMinLimit, float zMaxLimit, float zMinLimit)
        {
            this.xMaxLimit = xMaxLimit;
            this.xMinLimit = xMinLimit;
            this.yMaxLimit = yMaxLimit;
            this.yMinLimit = yMinLimit;
            this.zMaxLimit = zMaxLimit;
            this.zMinLimit = zMinLimit;
            ice_initialize();
        }

        #endregion

        #region Object members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override int GetHashCode()
        {
            int h_ = 5381;
            global::IceInternal.HashUtil.hashAdd(ref h_, "::digitaltwin::DataSetLimits");
            global::IceInternal.HashUtil.hashAdd(ref h_, xMaxLimit);
            global::IceInternal.HashUtil.hashAdd(ref h_, xMinLimit);
            global::IceInternal.HashUtil.hashAdd(ref h_, yMaxLimit);
            global::IceInternal.HashUtil.hashAdd(ref h_, yMinLimit);
            global::IceInternal.HashUtil.hashAdd(ref h_, zMaxLimit);
            global::IceInternal.HashUtil.hashAdd(ref h_, zMinLimit);
            return h_;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public override bool Equals(object other)
        {
            if(!(other is DataSetLimits))
            {
                return false;
            }
            DataSetLimits o = (DataSetLimits)other;
            if(!this.xMaxLimit.Equals(o.xMaxLimit))
            {
                return false;
            }
            if(!this.xMinLimit.Equals(o.xMinLimit))
            {
                return false;
            }
            if(!this.yMaxLimit.Equals(o.yMaxLimit))
            {
                return false;
            }
            if(!this.yMinLimit.Equals(o.yMinLimit))
            {
                return false;
            }
            if(!this.zMaxLimit.Equals(o.zMaxLimit))
            {
                return false;
            }
            if(!this.zMinLimit.Equals(o.zMinLimit))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator==(DataSetLimits lhs, DataSetLimits rhs)
        {
            return Equals(lhs, rhs);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static bool operator!=(DataSetLimits lhs, DataSetLimits rhs)
        {
            return !Equals(lhs, rhs);
        }

        #endregion

        #region Marshaling support

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_writeMembers(global::Ice.OutputStream ostr)
        {
            ostr.writeFloat(this.xMaxLimit);
            ostr.writeFloat(this.xMinLimit);
            ostr.writeFloat(this.yMaxLimit);
            ostr.writeFloat(this.yMinLimit);
            ostr.writeFloat(this.zMaxLimit);
            ostr.writeFloat(this.zMinLimit);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public void ice_readMembers(global::Ice.InputStream istr)
        {
            this.xMaxLimit = istr.readFloat();
            this.xMinLimit = istr.readFloat();
            this.yMaxLimit = istr.readFloat();
            this.yMinLimit = istr.readFloat();
            this.zMaxLimit = istr.readFloat();
            this.zMinLimit = istr.readFloat();
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static void ice_write(global::Ice.OutputStream ostr, DataSetLimits v)
        {
            v.ice_writeMembers(ostr);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        public static DataSetLimits ice_read(global::Ice.InputStream istr)
        {
            var v = new DataSetLimits();
            v.ice_readMembers(istr);
            return v;
        }

        #endregion
    }

    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface dataSink : global::Ice.Object, dataSinkOperations_
    {
    }
}

namespace digitaltwin
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_getDataSetReading(DataSet ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_getSingleDataReading(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_putDataSetReading(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_putSingleDataReading(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_getDataSetLimits(DataSetLimits ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_getSingleDataLimits(SingleDataLimits ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_updateDataSetLimits(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_updateSingleDataLimits(int ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_getDataSetAverage(DataSet ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_getSingleDataAverage(float ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_getDataSetDeviation(DataSet ret);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public delegate void Callback_dataSink_getSingleDataDeviation(float ret);
}

namespace digitaltwin
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface dataSinkPrx : global::Ice.ObjectPrx
    {
        DataSet getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<DataSet> getDataSetReadingAsync(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_getDataSetReading> begin_getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        DataSet end_getDataSetReading(global::Ice.AsyncResult asyncResult);

        float getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> getSingleDataReadingAsync(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_getSingleDataReading> begin_getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_getSingleDataReading(global::Ice.AsyncResult asyncResult);

        int putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> putDataSetReadingAsync(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_putDataSetReading> begin_putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_putDataSetReading(global::Ice.AsyncResult asyncResult);

        int putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> putSingleDataReadingAsync(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_putSingleDataReading> begin_putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_putSingleDataReading(global::Ice.AsyncResult asyncResult);

        DataSetLimits getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<DataSetLimits> getDataSetLimitsAsync(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_getDataSetLimits> begin_getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        DataSetLimits end_getDataSetLimits(global::Ice.AsyncResult asyncResult);

        SingleDataLimits getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<SingleDataLimits> getSingleDataLimitsAsync(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_getSingleDataLimits> begin_getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        SingleDataLimits end_getSingleDataLimits(global::Ice.AsyncResult asyncResult);

        int updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> updateDataSetLimitsAsync(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_updateDataSetLimits> begin_updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_updateDataSetLimits(global::Ice.AsyncResult asyncResult);

        int updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<int> updateSingleDataLimitsAsync(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_updateSingleDataLimits> begin_updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        int end_updateSingleDataLimits(global::Ice.AsyncResult asyncResult);

        DataSet getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<DataSet> getDataSetAverageAsync(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_getDataSetAverage> begin_getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        DataSet end_getDataSetAverage(global::Ice.AsyncResult asyncResult);

        float getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> getSingleDataAverageAsync(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_getSingleDataAverage> begin_getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_getSingleDataAverage(global::Ice.AsyncResult asyncResult);

        DataSet getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<DataSet> getDataSetDeviationAsync(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_getDataSetDeviation> begin_getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        DataSet end_getDataSetDeviation(global::Ice.AsyncResult asyncResult);

        float getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::System.Threading.Tasks.Task<float> getSingleDataDeviationAsync(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

        global::Ice.AsyncResult<Callback_dataSink_getSingleDataDeviation> begin_getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

        global::Ice.AsyncResult begin_getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.AsyncCallback callback, object cookie);

        global::Ice.AsyncResult begin_getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

        float end_getSingleDataDeviation(global::Ice.AsyncResult asyncResult);
    }
}

namespace digitaltwin
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public interface dataSinkOperations_
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        DataSet getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        float getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        int putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        int putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        DataSetLimits getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        SingleDataLimits getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        int updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        int updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        DataSet getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        float getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        DataSet getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.Current current = null);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
        float getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.Current current = null);
    }
}

namespace digitaltwin
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    [global::System.Serializable]
    public sealed class dataSinkPrxHelper : global::Ice.ObjectPrxHelperBase, dataSinkPrx
    {
        public dataSinkPrxHelper()
        {
        }

        public dataSinkPrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public DataSet getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDataSetReadingAsync(FacilityID, DeviceID, dataType, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getSingleDataReadingAsync(FacilityID, DeviceID, dataType, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_putDataSetReadingAsync(FacilityID, DeviceID, dataType, data, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_putSingleDataReadingAsync(FacilityID, DeviceID, dataType, data, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public DataSetLimits getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDataSetLimitsAsync(FacilityID, DeviceID, dataType, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public SingleDataLimits getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getSingleDataLimitsAsync(FacilityID, DeviceID, dataType, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_updateDataSetLimitsAsync(FacilityID, DeviceID, dataType, limits, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public int updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_updateSingleDataLimitsAsync(FacilityID, DeviceID, dataType, limits, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public DataSet getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDataSetAverageAsync(FacilityID, DeviceID, dataType, secs, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getSingleDataAverageAsync(FacilityID, DeviceID, dataType, secs, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public DataSet getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getDataSetDeviationAsync(FacilityID, DeviceID, dataType, secs, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        public float getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            try
            {
                return _iceI_getSingleDataDeviationAsync(FacilityID, DeviceID, dataType, secs, context, null, global::System.Threading.CancellationToken.None, true).Result;
            }
            catch(global::System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public global::System.Threading.Tasks.Task<DataSet> getDataSetReadingAsync(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDataSetReadingAsync(FacilityID, DeviceID, dataType, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<DataSet> _iceI_getDataSetReadingAsync(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDataSetReading_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<DataSet>(progress, cancel);
            _iceI_getDataSetReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDataSetReading_name = "getDataSetReading";

        private void _iceI_getDataSetReading(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<DataSet>(completed);
            outAsync.invoke(
                _getDataSetReading_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 2);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RegistryNotFound)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    DataSet ret = new DataSet();
                    ret.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getSingleDataReadingAsync(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getSingleDataReadingAsync(FacilityID, DeviceID, dataType, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getSingleDataReadingAsync(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSingleDataReading_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getSingleDataReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSingleDataReading_name = "getSingleDataReading";

        private void _iceI_getSingleDataReading(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getSingleDataReading_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 3);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RegistryNotFound)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> putDataSetReadingAsync(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_putDataSetReadingAsync(FacilityID, DeviceID, dataType, data, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_putDataSetReadingAsync(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, DataSet iceP_data, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_putDataSetReading_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_putDataSetReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_data, context, synchronous, completed);
            return completed.Task;
        }

        private const string _putDataSetReading_name = "putDataSetReading";

        private void _iceI_putDataSetReading(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, DataSet iceP_data, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _putDataSetReading_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 2);
                    iceP_data.ice_writeMembers(ostr);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InsertingError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> putSingleDataReadingAsync(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_putSingleDataReadingAsync(FacilityID, DeviceID, dataType, data, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_putSingleDataReadingAsync(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, float iceP_data, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_putSingleDataReading_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_putSingleDataReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_data, context, synchronous, completed);
            return completed.Task;
        }

        private const string _putSingleDataReading_name = "putSingleDataReading";

        private void _iceI_putSingleDataReading(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, float iceP_data, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _putSingleDataReading_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 3);
                    ostr.writeFloat(iceP_data);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InsertingError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<DataSetLimits> getDataSetLimitsAsync(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDataSetLimitsAsync(FacilityID, DeviceID, dataType, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<DataSetLimits> _iceI_getDataSetLimitsAsync(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDataSetLimits_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<DataSetLimits>(progress, cancel);
            _iceI_getDataSetLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDataSetLimits_name = "getDataSetLimits";

        private void _iceI_getDataSetLimits(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<DataSetLimits>(completed);
            outAsync.invoke(
                _getDataSetLimits_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 2);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RegistryNotFound)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    DataSetLimits ret = new DataSetLimits();
                    ret.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<SingleDataLimits> getSingleDataLimitsAsync(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getSingleDataLimitsAsync(FacilityID, DeviceID, dataType, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<SingleDataLimits> _iceI_getSingleDataLimitsAsync(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSingleDataLimits_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<SingleDataLimits>(progress, cancel);
            _iceI_getSingleDataLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSingleDataLimits_name = "getSingleDataLimits";

        private void _iceI_getSingleDataLimits(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<SingleDataLimits>(completed);
            outAsync.invoke(
                _getSingleDataLimits_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 3);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RegistryNotFound)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    SingleDataLimits ret = new SingleDataLimits();
                    ret.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> updateDataSetLimitsAsync(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_updateDataSetLimitsAsync(FacilityID, DeviceID, dataType, limits, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_updateDataSetLimitsAsync(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, DataSetLimits iceP_limits, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_updateDataSetLimits_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_updateDataSetLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_limits, context, synchronous, completed);
            return completed.Task;
        }

        private const string _updateDataSetLimits_name = "updateDataSetLimits";

        private void _iceI_updateDataSetLimits(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, DataSetLimits iceP_limits, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _updateDataSetLimits_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 2);
                    iceP_limits.ice_writeMembers(ostr);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InsertingError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<int> updateSingleDataLimitsAsync(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_updateSingleDataLimitsAsync(FacilityID, DeviceID, dataType, limits, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<int> _iceI_updateSingleDataLimitsAsync(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, SingleDataLimits iceP_limits, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_updateSingleDataLimits_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
            _iceI_updateSingleDataLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_limits, context, synchronous, completed);
            return completed.Task;
        }

        private const string _updateSingleDataLimits_name = "updateSingleDataLimits";

        private void _iceI_updateSingleDataLimits(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, SingleDataLimits iceP_limits, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<int>(completed);
            outAsync.invoke(
                _updateSingleDataLimits_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 3);
                    iceP_limits.ice_writeMembers(ostr);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(InsertingError)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    int ret;
                    ret = istr.readInt();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<DataSet> getDataSetAverageAsync(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDataSetAverageAsync(FacilityID, DeviceID, dataType, secs, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<DataSet> _iceI_getDataSetAverageAsync(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, int iceP_secs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDataSetAverage_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<DataSet>(progress, cancel);
            _iceI_getDataSetAverage(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDataSetAverage_name = "getDataSetAverage";

        private void _iceI_getDataSetAverage(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, int iceP_secs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<DataSet>(completed);
            outAsync.invoke(
                _getDataSetAverage_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 2);
                    ostr.writeInt(iceP_secs);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RegistryNotFound)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    DataSet ret = new DataSet();
                    ret.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getSingleDataAverageAsync(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getSingleDataAverageAsync(FacilityID, DeviceID, dataType, secs, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getSingleDataAverageAsync(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, int iceP_secs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSingleDataAverage_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getSingleDataAverage(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSingleDataAverage_name = "getSingleDataAverage";

        private void _iceI_getSingleDataAverage(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, int iceP_secs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getSingleDataAverage_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 3);
                    ostr.writeInt(iceP_secs);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RegistryNotFound)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<DataSet> getDataSetDeviationAsync(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getDataSetDeviationAsync(FacilityID, DeviceID, dataType, secs, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<DataSet> _iceI_getDataSetDeviationAsync(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, int iceP_secs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getDataSetDeviation_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<DataSet>(progress, cancel);
            _iceI_getDataSetDeviation(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getDataSetDeviation_name = "getDataSetDeviation";

        private void _iceI_getDataSetDeviation(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, int iceP_secs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<DataSet>(completed);
            outAsync.invoke(
                _getDataSetDeviation_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 2);
                    ostr.writeInt(iceP_secs);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RegistryNotFound)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    DataSet ret = new DataSet();
                    ret.ice_readMembers(istr);
                    return ret;
                });
        }

        public global::System.Threading.Tasks.Task<float> getSingleDataDeviationAsync(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
        {
            return _iceI_getSingleDataDeviationAsync(FacilityID, DeviceID, dataType, secs, context, progress, cancel, false);
        }

        private global::System.Threading.Tasks.Task<float> _iceI_getSingleDataDeviationAsync(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, int iceP_secs, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
        {
            iceCheckTwowayOnly(_getSingleDataDeviation_name);
            var completed = new global::IceInternal.OperationTaskCompletionCallback<float>(progress, cancel);
            _iceI_getSingleDataDeviation(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, context, synchronous, completed);
            return completed.Task;
        }

        private const string _getSingleDataDeviation_name = "getSingleDataDeviation";

        private void _iceI_getSingleDataDeviation(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, int iceP_secs, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<float>(completed);
            outAsync.invoke(
                _getSingleDataDeviation_name,
                global::Ice.OperationMode.Normal,
                global::Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (global::Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_FacilityID);
                    ostr.writeString(iceP_DeviceID);
                    ostr.writeEnum((int)iceP_dataType, 3);
                    ostr.writeInt(iceP_secs);
                },
                userException: (global::Ice.UserException ex) =>
                {
                    try
                    {
                        throw ex;
                    }
                    catch(RegistryNotFound)
                    {
                        throw;
                    }
                    catch(global::Ice.UserException)
                    {
                    }
                },
                read: (global::Ice.InputStream istr) =>
                {
                    float ret;
                    ret = istr.readFloat();
                    return ret;
                });
        }

        #endregion

        #region Asynchronous operations

        public global::Ice.AsyncResult<Callback_dataSink_getDataSetReading> begin_getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDataSetReading(FacilityID, DeviceID, dataType, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataSetReading(FacilityID, DeviceID, dataType, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataSetReading(FacilityID, DeviceID, dataType, context, callback, cookie, false);
        }

        public DataSet end_getDataSetReading(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDataSetReading_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<DataSet>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_getDataSetReading> begin_getDataSetReading(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDataSetReading_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_getDataSetReading, DataSet>(
                (Callback_dataSink_getDataSetReading cb, DataSet ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDataSetReading_name, cookie, completedCallback);
            _iceI_getDataSetReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_getSingleDataReading> begin_getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getSingleDataReading(FacilityID, DeviceID, dataType, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSingleDataReading(FacilityID, DeviceID, dataType, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSingleDataReading(FacilityID, DeviceID, dataType, context, callback, cookie, false);
        }

        public float end_getSingleDataReading(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getSingleDataReading_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_getSingleDataReading> begin_getSingleDataReading(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getSingleDataReading_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_getSingleDataReading, float>(
                (Callback_dataSink_getSingleDataReading cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getSingleDataReading_name, cookie, completedCallback);
            _iceI_getSingleDataReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_putDataSetReading> begin_putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_putDataSetReading(FacilityID, DeviceID, dataType, data, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_putDataSetReading(FacilityID, DeviceID, dataType, data, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_putDataSetReading(FacilityID, DeviceID, dataType, data, context, callback, cookie, false);
        }

        public int end_putDataSetReading(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _putDataSetReading_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_putDataSetReading> begin_putDataSetReading(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, DataSet iceP_data, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_putDataSetReading_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_putDataSetReading, int>(
                (Callback_dataSink_putDataSetReading cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _putDataSetReading_name, cookie, completedCallback);
            _iceI_putDataSetReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_data, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_putSingleDataReading> begin_putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_putSingleDataReading(FacilityID, DeviceID, dataType, data, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_putSingleDataReading(FacilityID, DeviceID, dataType, data, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_putSingleDataReading(FacilityID, DeviceID, dataType, data, context, callback, cookie, false);
        }

        public int end_putSingleDataReading(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _putSingleDataReading_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_putSingleDataReading> begin_putSingleDataReading(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, float iceP_data, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_putSingleDataReading_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_putSingleDataReading, int>(
                (Callback_dataSink_putSingleDataReading cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _putSingleDataReading_name, cookie, completedCallback);
            _iceI_putSingleDataReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_data, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_getDataSetLimits> begin_getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDataSetLimits(FacilityID, DeviceID, dataType, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataSetLimits(FacilityID, DeviceID, dataType, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataSetLimits(FacilityID, DeviceID, dataType, context, callback, cookie, false);
        }

        public DataSetLimits end_getDataSetLimits(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDataSetLimits_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<DataSetLimits>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_getDataSetLimits> begin_getDataSetLimits(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDataSetLimits_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_getDataSetLimits, DataSetLimits>(
                (Callback_dataSink_getDataSetLimits cb, DataSetLimits ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDataSetLimits_name, cookie, completedCallback);
            _iceI_getDataSetLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_getSingleDataLimits> begin_getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getSingleDataLimits(FacilityID, DeviceID, dataType, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSingleDataLimits(FacilityID, DeviceID, dataType, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSingleDataLimits(FacilityID, DeviceID, dataType, context, callback, cookie, false);
        }

        public SingleDataLimits end_getSingleDataLimits(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getSingleDataLimits_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<SingleDataLimits>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_getSingleDataLimits> begin_getSingleDataLimits(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getSingleDataLimits_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_getSingleDataLimits, SingleDataLimits>(
                (Callback_dataSink_getSingleDataLimits cb, SingleDataLimits ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getSingleDataLimits_name, cookie, completedCallback);
            _iceI_getSingleDataLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_updateDataSetLimits> begin_updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_updateDataSetLimits(FacilityID, DeviceID, dataType, limits, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateDataSetLimits(FacilityID, DeviceID, dataType, limits, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateDataSetLimits(FacilityID, DeviceID, dataType, limits, context, callback, cookie, false);
        }

        public int end_updateDataSetLimits(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _updateDataSetLimits_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_updateDataSetLimits> begin_updateDataSetLimits(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, DataSetLimits iceP_limits, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_updateDataSetLimits_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_updateDataSetLimits, int>(
                (Callback_dataSink_updateDataSetLimits cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _updateDataSetLimits_name, cookie, completedCallback);
            _iceI_updateDataSetLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_limits, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_updateSingleDataLimits> begin_updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_updateSingleDataLimits(FacilityID, DeviceID, dataType, limits, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateSingleDataLimits(FacilityID, DeviceID, dataType, limits, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_updateSingleDataLimits(FacilityID, DeviceID, dataType, limits, context, callback, cookie, false);
        }

        public int end_updateSingleDataLimits(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _updateSingleDataLimits_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_updateSingleDataLimits> begin_updateSingleDataLimits(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, SingleDataLimits iceP_limits, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_updateSingleDataLimits_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_updateSingleDataLimits, int>(
                (Callback_dataSink_updateSingleDataLimits cb, int ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _updateSingleDataLimits_name, cookie, completedCallback);
            _iceI_updateSingleDataLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_limits, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_getDataSetAverage> begin_getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDataSetAverage(FacilityID, DeviceID, dataType, secs, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataSetAverage(FacilityID, DeviceID, dataType, secs, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataSetAverage(FacilityID, DeviceID, dataType, secs, context, callback, cookie, false);
        }

        public DataSet end_getDataSetAverage(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDataSetAverage_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<DataSet>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_getDataSetAverage> begin_getDataSetAverage(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, int iceP_secs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDataSetAverage_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_getDataSetAverage, DataSet>(
                (Callback_dataSink_getDataSetAverage cb, DataSet ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDataSetAverage_name, cookie, completedCallback);
            _iceI_getDataSetAverage(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_getSingleDataAverage> begin_getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getSingleDataAverage(FacilityID, DeviceID, dataType, secs, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSingleDataAverage(FacilityID, DeviceID, dataType, secs, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSingleDataAverage(FacilityID, DeviceID, dataType, secs, context, callback, cookie, false);
        }

        public float end_getSingleDataAverage(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getSingleDataAverage_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_getSingleDataAverage> begin_getSingleDataAverage(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, int iceP_secs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getSingleDataAverage_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_getSingleDataAverage, float>(
                (Callback_dataSink_getSingleDataAverage cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getSingleDataAverage_name, cookie, completedCallback);
            _iceI_getSingleDataAverage(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_getDataSetDeviation> begin_getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getDataSetDeviation(FacilityID, DeviceID, dataType, secs, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataSetDeviation(FacilityID, DeviceID, dataType, secs, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getDataSetDeviation(FacilityID, DeviceID, dataType, secs, context, callback, cookie, false);
        }

        public DataSet end_getDataSetDeviation(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getDataSetDeviation_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<DataSet>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_getDataSetDeviation> begin_getDataSetDeviation(string iceP_FacilityID, string iceP_DeviceID, TypeDataSet iceP_dataType, int iceP_secs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getDataSetDeviation_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_getDataSetDeviation, DataSet>(
                (Callback_dataSink_getDataSetDeviation cb, DataSet ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getDataSetDeviation_name, cookie, completedCallback);
            _iceI_getDataSetDeviation(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, context, synchronous, completed);
            return completed;
        }

        public global::Ice.AsyncResult<Callback_dataSink_getSingleDataDeviation> begin_getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
        {
            return begin_getSingleDataDeviation(FacilityID, DeviceID, dataType, secs, context, null, null, false);
        }

        public global::Ice.AsyncResult begin_getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSingleDataDeviation(FacilityID, DeviceID, dataType, secs, new global::Ice.OptionalContext(), callback, cookie, false);
        }

        public global::Ice.AsyncResult begin_getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
        {
            return begin_getSingleDataDeviation(FacilityID, DeviceID, dataType, secs, context, callback, cookie, false);
        }

        public float end_getSingleDataDeviation(global::Ice.AsyncResult asyncResult)
        {
            var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getSingleDataDeviation_name);
            var outgoing_ = (global::IceInternal.OutgoingAsyncT<float>)resultI_.OutgoingAsync;
            return outgoing_.getResult(resultI_.wait());
        }

        private global::Ice.AsyncResult<Callback_dataSink_getSingleDataDeviation> begin_getSingleDataDeviation(string iceP_FacilityID, string iceP_DeviceID, TypeSingleData iceP_dataType, int iceP_secs, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            iceCheckAsyncTwowayOnly(_getSingleDataDeviation_name);
            var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_dataSink_getSingleDataDeviation, float>(
                (Callback_dataSink_getSingleDataDeviation cb, float ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke(ret);
                    }
                },
                this, _getSingleDataDeviation_name, cookie, completedCallback);
            _iceI_getSingleDataDeviation(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static dataSinkPrx checkedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            dataSinkPrx r = b as dataSinkPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                dataSinkPrxHelper h = new dataSinkPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static dataSinkPrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            dataSinkPrx r = b as dataSinkPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                dataSinkPrxHelper h = new dataSinkPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static dataSinkPrx checkedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    dataSinkPrxHelper h = new dataSinkPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static dataSinkPrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    dataSinkPrxHelper h = new dataSinkPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(global::Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static dataSinkPrx uncheckedCast(global::Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            dataSinkPrx r = b as dataSinkPrx;
            if(r == null)
            {
                dataSinkPrxHelper h = new dataSinkPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static dataSinkPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            global::Ice.ObjectPrx bb = b.ice_facet(f);
            dataSinkPrxHelper h = new dataSinkPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::digitaltwin::dataSink"
        };

        public static string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Marshaling support

        public static void write(global::Ice.OutputStream ostr, dataSinkPrx v)
        {
            ostr.writeProxy(v);
        }

        public static dataSinkPrx read(global::Ice.InputStream istr)
        {
            global::Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                dataSinkPrxHelper result = new dataSinkPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace digitaltwin
{
    [global::System.Runtime.InteropServices.ComVisible(false)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.3")]
    public abstract class dataSinkDisp_ : global::Ice.ObjectImpl, dataSink
    {
        #region Slice operations

        public abstract DataSet getDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.Current current = null);

        public abstract float getSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.Current current = null);

        public abstract int putDataSetReading(string FacilityID, string DeviceID, TypeDataSet dataType, DataSet data, global::Ice.Current current = null);

        public abstract int putSingleDataReading(string FacilityID, string DeviceID, TypeSingleData dataType, float data, global::Ice.Current current = null);

        public abstract DataSetLimits getDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, global::Ice.Current current = null);

        public abstract SingleDataLimits getSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, global::Ice.Current current = null);

        public abstract int updateDataSetLimits(string FacilityID, string DeviceID, TypeDataSet dataType, DataSetLimits limits, global::Ice.Current current = null);

        public abstract int updateSingleDataLimits(string FacilityID, string DeviceID, TypeSingleData dataType, SingleDataLimits limits, global::Ice.Current current = null);

        public abstract DataSet getDataSetAverage(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.Current current = null);

        public abstract float getSingleDataAverage(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.Current current = null);

        public abstract DataSet getDataSetDeviation(string FacilityID, string DeviceID, TypeDataSet dataType, int secs, global::Ice.Current current = null);

        public abstract float getSingleDataDeviation(string FacilityID, string DeviceID, TypeSingleData dataType, int secs, global::Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Ice::Object",
            "::digitaltwin::dataSink"
        };

        public override bool ice_isA(string s, global::Ice.Current current = null)
        {
            return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(global::Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(global::Ice.Current current = null)
        {
            return _ids[1];
        }

        public static new string ice_staticId()
        {
            return _ids[1];
        }

        #endregion

        #region Operation dispatch

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getDataSetReading(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeDataSet iceP_dataType;
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeDataSet)istr.readEnum(2);
            inS.endReadParams();
            var ret = obj.getDataSetReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, current);
            var ostr = inS.startWriteParams();
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getSingleDataReading(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeSingleData iceP_dataType;
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeSingleData)istr.readEnum(3);
            inS.endReadParams();
            var ret = obj.getSingleDataReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_putDataSetReading(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeDataSet iceP_dataType;
            DataSet iceP_data;
            iceP_data = new DataSet();
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeDataSet)istr.readEnum(2);
            iceP_data.ice_readMembers(istr);
            inS.endReadParams();
            var ret = obj.putDataSetReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_data, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_putSingleDataReading(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeSingleData iceP_dataType;
            float iceP_data;
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeSingleData)istr.readEnum(3);
            iceP_data = istr.readFloat();
            inS.endReadParams();
            var ret = obj.putSingleDataReading(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_data, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getDataSetLimits(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeDataSet iceP_dataType;
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeDataSet)istr.readEnum(2);
            inS.endReadParams();
            var ret = obj.getDataSetLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, current);
            var ostr = inS.startWriteParams();
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getSingleDataLimits(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeSingleData iceP_dataType;
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeSingleData)istr.readEnum(3);
            inS.endReadParams();
            var ret = obj.getSingleDataLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, current);
            var ostr = inS.startWriteParams();
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_updateDataSetLimits(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeDataSet iceP_dataType;
            DataSetLimits iceP_limits;
            iceP_limits = new DataSetLimits();
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeDataSet)istr.readEnum(2);
            iceP_limits.ice_readMembers(istr);
            inS.endReadParams();
            var ret = obj.updateDataSetLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_limits, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_updateSingleDataLimits(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeSingleData iceP_dataType;
            SingleDataLimits iceP_limits;
            iceP_limits = new SingleDataLimits();
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeSingleData)istr.readEnum(3);
            iceP_limits.ice_readMembers(istr);
            inS.endReadParams();
            var ret = obj.updateSingleDataLimits(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_limits, current);
            var ostr = inS.startWriteParams();
            ostr.writeInt(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getDataSetAverage(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeDataSet iceP_dataType;
            int iceP_secs;
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeDataSet)istr.readEnum(2);
            iceP_secs = istr.readInt();
            inS.endReadParams();
            var ret = obj.getDataSetAverage(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, current);
            var ostr = inS.startWriteParams();
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getSingleDataAverage(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeSingleData iceP_dataType;
            int iceP_secs;
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeSingleData)istr.readEnum(3);
            iceP_secs = istr.readInt();
            inS.endReadParams();
            var ret = obj.getSingleDataAverage(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getDataSetDeviation(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeDataSet iceP_dataType;
            int iceP_secs;
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeDataSet)istr.readEnum(2);
            iceP_secs = istr.readInt();
            inS.endReadParams();
            var ret = obj.getDataSetDeviation(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, current);
            var ostr = inS.startWriteParams();
            ret.ice_writeMembers(ostr);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceD_getSingleDataDeviation(dataSink obj, global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_FacilityID;
            string iceP_DeviceID;
            TypeSingleData iceP_dataType;
            int iceP_secs;
            iceP_FacilityID = istr.readString();
            iceP_DeviceID = istr.readString();
            iceP_dataType = (TypeSingleData)istr.readEnum(3);
            iceP_secs = istr.readInt();
            inS.endReadParams();
            var ret = obj.getSingleDataDeviation(iceP_FacilityID, iceP_DeviceID, iceP_dataType, iceP_secs, current);
            var ostr = inS.startWriteParams();
            ostr.writeFloat(ret);
            inS.endWriteParams(ostr);
            return inS.setResult(ostr);
        }

        private static readonly string[] _all =
        {
            "getDataSetAverage",
            "getDataSetDeviation",
            "getDataSetLimits",
            "getDataSetReading",
            "getSingleDataAverage",
            "getSingleDataDeviation",
            "getSingleDataLimits",
            "getSingleDataReading",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "putDataSetReading",
            "putSingleDataReading",
            "updateDataSetLimits",
            "updateSingleDataLimits"
        };

        public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
        iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
        {
            int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_getDataSetAverage(this, inS, current);
                }
                case 1:
                {
                    return iceD_getDataSetDeviation(this, inS, current);
                }
                case 2:
                {
                    return iceD_getDataSetLimits(this, inS, current);
                }
                case 3:
                {
                    return iceD_getDataSetReading(this, inS, current);
                }
                case 4:
                {
                    return iceD_getSingleDataAverage(this, inS, current);
                }
                case 5:
                {
                    return iceD_getSingleDataDeviation(this, inS, current);
                }
                case 6:
                {
                    return iceD_getSingleDataLimits(this, inS, current);
                }
                case 7:
                {
                    return iceD_getSingleDataReading(this, inS, current);
                }
                case 8:
                {
                    return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 9:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 10:
                {
                    return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 11:
                {
                    return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 12:
                {
                    return iceD_putDataSetReading(this, inS, current);
                }
                case 13:
                {
                    return iceD_putSingleDataReading(this, inS, current);
                }
                case 14:
                {
                    return iceD_updateDataSetLimits(this, inS, current);
                }
                case 15:
                {
                    return iceD_updateSingleDataLimits(this, inS, current);
                }
            }

            global::System.Diagnostics.Debug.Assert(false);
            throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
